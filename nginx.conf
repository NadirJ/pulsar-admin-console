events { }
http {

  client_max_body_size 128M;

  log_format  main
              'remote_addr:$remote_addr\t'
              'time_local:$time_local\t'
              'method:$request_method\t'
              'uri:$request_uri\t'
              'host:$host\t'
              'status:$status\t'
              'bytes_sent:$body_bytes_sent\t'
              'referer:$http_referer\t'
              'useragent:$http_user_agent\t'
              'forwardedfor:$http_x_forwarded_for\t'
              'authorization:$http_authorization\t'
              'request_time:$request_time';

  access_log        /var/log/nginx/access.log main;

  rewrite_log on;

  error_log stderr debug;



  server {

    location / {
      proxy_set_header Host            $http_host;
      proxy_set_header X-Forwarded-For $remote_addr;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_pass http://dashboard:80;
    }

    # Standalone cluster forwarding rule for functions
    location ~ /api/v1/standalone/functions {
      proxy_set_header Accepts application/json;
      rewrite ^/api/v1/standalone/functions/(.*)$ /admin/v3/functions/$1 break;
      # Using docker static IP address so we can run nginx in Docker
      proxy_pass http://172.17.0.1:8080$uri$is_args$args;
    }

    # Standalone cluster forwarding rule for sinks
    location ~ /api/v1/standalone/sinks { 
      proxy_set_header Accepts application/json;
      rewrite ^/api/v1/standalone/sinks/(.*)$ /admin/v3/sinks/$1 break;
      proxy_pass http://172.17.0.1:8080$uri$is_args$args;
    }

    # Standalone cluster forwarding rule for sinks
    location ~ /api/v1/standalone/sources { 
      proxy_set_header Accepts application/json;
      rewrite ^/api/v1/standalone/sources/(.*)$ /admin/v3/sources/$1 break;
      proxy_pass http://172.17.0.1:8080$uri$is_args$args;
    }

    # Standalone cluster forwarding rule 
    location ~ /api/v1/standalone {
      rewrite ^/api/v1/standalone/(.*)$ /admin/v2/$1 break;
      proxy_pass http://172.17.0.1:8080$uri$is_args$args;
    }


    listen 80 default_server;
    listen 443 ssl;
    ssl_certificate /certs/localhost.crt;
    ssl_certificate_key /certs/localhost.key;
    ssl_protocols TLSv1.1 TLSv1.2 TLSv1.3;
  }

  server {

    location = /nginx_status {
      stub_status;

      access_log off;

    }

    listen 8080 ;

  }

}
